--------------------------------
面向对象程序设计 OOP 
object-oriented programming
--------------------------------
面向对象程序的核心思想是数据抽象,继承,动态绑定

--------------------------------
抽象
--------------------------------
将接口和实现分离

--------------------------------
继承
--------------------------------
可以定义相似的类型对其相似关系建模

--------------------------------
动态绑定
--------------------------------
在一定程度上忽略相似类型的区别,而以统一的方式使用它们的对象
当我们使用基类的引用或指针时,调用一个虚函数时将发生动态绑定

动态绑定只有在通过指针或引用调用虚函数时才会发生

当我们通过指针或引用调用虚函数时,编译器产生的代码直到运行时才能确定应该调用哪个版本.
当我们通过一个具有普通类型(非引用或指针)的表达式调用虚函数时,在编译时就会将调用的版本确定下来.


--------------------------------
虚函数
--------------------------------
基类将类型相关的函数与派生类不做改变直接继承的函数区分对待,同时基类希望它的派生类各自定义适合自身的版本

基类必须将它的两种成员函数区分开来
一种是基类希望其派生类进行覆盖的函数
另一种是基类希望派生类直接继承而不要改变的函数

一个派生类中如果覆盖了某个继承而来的虚函数,则他的形参类型和返回值类型必须与被它覆盖的基类函数完全一致

只有虚函数才能被override

不允许派生类的覆盖 使用 final

final和override说明符出现在形参列表以及尾置返回类型后
--------------------------------
protected
--------------------------------
使基类的对象可以被派生类访问,同时不能被其他用户访问



